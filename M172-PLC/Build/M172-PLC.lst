***********************************************************************
*
*	CODE GENERATION LISTING FOR: M172-PLC
*	COMPILER VERSION: 5.20.0.53
*
***********************************************************************

**************************************************
	CODE GENERATOR SUBROUTINES
**************************************************

$$MOD:
A08041E0  FB90 F3F1		sdiv r3, r0, r1
A08041E4  4359     		mul r1, r1, r3
A08041E6  EBC1 0000		rsb r0, r1, r0
A08041EA  4770     		bx lr

$$MOD_U:
A08041EC  FBB0 F3F1		udiv r3, r0, r1
A08041F0  4359     		mul r1, r1, r3
A08041F2  EBC1 0000		rsb r0, r1, r0
A08041F6  4770     		bx lr

**************************************************
	List program: main
**************************************************

PROGRAM main

END_PROGRAM

A0804200  B082     		sub sp, sp, #8
A0804202  F8CD E000		str lr, [sp]
A0804206  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:main}
#1		(*$WAITSWITCH$*)
#2		
#3		
#4			(* IF iTempSetPoint = 0 *)
#5			LD		iTempSetPoint	{LNXT:1|-1|-1}
(*) UNDEF
A080420A  F8DF 70B4		ldr r7, [pc, #+180] ; 0xA0003EFA
A080420E  F9B7 0000		ldrsh r0, [r7]

#6			EQ		0	{LNXT:1|-1|-1}
(*) INT
A0804212  2800     		cmp r0, #0
A0804214  BF18 2000		nemov r0, #0
A0804218  BF08 2001		eqmov r0, #1

#7			JMPCN	$label0	{LNXT:1|2|4}
(-) BOOL
A080421C  2800     		cmp r0, #0
A080421E  D006     		beq #12 ; 0xA080422E


#8		
#9			(* THEN *)
#10		
#11				(* uiSystemStatus := 0; *)
#12				MOVE		0,uiSystemStatus	{LNXT:2|1|-1}
(*) BOOL
A0804222  2000     		mov r0, #0 ; 0
A0804224  F8DF 709C		ldr r7, [pc, #+156] ; 0xA0003EFE
A0804228  8038     		strh r0, [r7]

#13				JMP		$label1	{LNXT:1|2|4}
(-) INT
A080422A  E040     		b #128 ; 0xA08042AE


#14		$label0:
#15		
#16			(* ELSE *)
#17		
#18		
#19				(* IF iTempSetPoint < iAmbTemp - 1 *)
#20				LD		iTempSetPoint	{LNXT:4|-1|-1}
(*) UNDEF
A080422E  F8DF 7090		ldr r7, [pc, #+144] ; 0xA0003EFA
A0804232  F9B7 0000		ldrsh r0, [r7]

#21				LT(		iAmbTemp	{LNXT:4|-1|-1}
(*) INT
A0804236  B082     		sub sp, sp, #8
A0804238  F8CD 0000		str r0, [sp]
A080423C  F8DF 707C		ldr r7, [pc, #+124] ; 0xA0003EF8
A0804240  F9B7 0000		ldrsh r0, [r7]

#22				SUB		1	{LNXT:4|-1|-1}
(-) INT
A0804244  1E40     		sub r0, r0, #1

#23				)	{LNXT:4|-1|-1}
(*) INT
A0804246  4607     		mov r7, r0
A0804248  F8DD 0000		ldr r0, [sp]
A080424C  B002     		add sp, sp, #8
A080424E  42B8     		cmp r0, r7
A0804250  BFA8 2000		gemov r0, #0
A0804254  BFB8 2001		ltmov r0, #1

#24				JMPCN	$label2	{LNXT:4|5|6}
(-) BOOL
A0804258  2800     		cmp r0, #0
A080425A  D006     		beq #12 ; 0xA080426A


#25		
#26				(* THEN *)
#27		
#28					(* uiSystemStatus := 2; *)
#29					MOVE		2,uiSystemStatus	{LNXT:5|1|-1}
(*) BOOL
A080425E  2002     		mov r0, #2 ; 2
A0804260  F8DF 7060		ldr r7, [pc, #+96] ; 0xA0003EFE
A0804264  8038     		strh r0, [r7]

#30					JMP		$label4	{LNXT:4|5|6}
(-) INT
A0804266  E022     		b #68 ; 0xA08042AE


#31		$label2:
#32		
#33				(* ELSIF iTempSetPoint > iAmbTemp+ 1 *)
#34				LD		iTempSetPoint	{LNXT:6|-1|-1}
(*) UNDEF
A080426A  F8DF 7054		ldr r7, [pc, #+84] ; 0xA0003EFA
A080426E  F9B7 0000		ldrsh r0, [r7]

#35				GT(		iAmbTemp	{LNXT:6|-1|-1}
(*) INT
A0804272  B082     		sub sp, sp, #8
A0804274  F8CD 0000		str r0, [sp]
A0804278  F8DF 7040		ldr r7, [pc, #+64] ; 0xA0003EF8
A080427C  F9B7 0000		ldrsh r0, [r7]

#36				ADD		1	{LNXT:6|-1|-1}
(-) INT
A0804280  1C40     		add r0, r0, #1

#37				)	{LNXT:6|-1|-1}
(*) INT
A0804282  4607     		mov r7, r0
A0804284  F8DD 0000		ldr r0, [sp]
A0804288  B002     		add sp, sp, #8
A080428A  42B8     		cmp r0, r7
A080428C  BFD8 2000		lemov r0, #0
A0804290  BFC8 2001		gtmov r0, #1

#38				JMPCN	$label3	{LNXT:6|7|9}
(-) BOOL
A0804294  2800     		cmp r0, #0
A0804296  D006     		beq #12 ; 0xA08042A6


#39		
#40				(* THEN *)
#41		
#42					(* uiSystemStatus := 1; *)
#43					MOVE		1,uiSystemStatus	{LNXT:7|1|-1}
(*) BOOL
A080429A  2001     		mov r0, #1 ; 1
A080429C  F8DF 7024		ldr r7, [pc, #+36] ; 0xA0003EFE
A08042A0  8038     		strh r0, [r7]

#44					JMP		$label4	{LNXT:6|7|9}
(-) INT
A08042A2  E004     		b #8 ; 0xA08042AE


#45		$label3:
#46		
#47				(* ELSE *)
#48		
#49					(* uiSystemStatus := 0; *)
#50					MOVE		0,uiSystemStatus	{LNXT:9|1|-1}
(*) INT
A08042A6  2000     		mov r0, #0 ; 0
A08042A8  F8DF 7018		ldr r7, [pc, #+24] ; 0xA0003EFE
A08042AC  8038     		strh r0, [r7]

A08042AE  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A08042B2  F8DD E000		ldr lr, [sp]
A08042B6  B002     		add sp, sp, #8

A08042B8  4770     		bx lr

A08042BC  FFFFFFFF		; 0xA0003EF8
A08042C0  FFFFFFFF		; 0xA0003EFA
A08042C4  FFFFFFFF		; 0xA0003EFE

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
A08042C8  B082     		sub sp, sp, #8
A08042CA  F8CD E000		str lr, [sp]
A08042CE  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A08042D2  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A08042D6  F8DD E000		ldr lr, [sp]
A08042DA  B002     		add sp, sp, #8

A08042DC  4770     		bx lr


*** OUTPUT:
A08042DE  B082     		sub sp, sp, #8
A08042E0  F8CD E000		str lr, [sp]
A08042E4  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A08042E8  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A08042EC  F8DD E000		ldr lr, [sp]
A08042F0  B002     		add sp, sp, #8

A08042F2  4770     		bx lr



**************************************************
	Task Background init code
**************************************************

A08042F4  B082     		sub sp, sp, #8
A08042F6  F8CD E000		str lr, [sp]
A08042FA  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A08042FE  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A0804302  F8DD E000		ldr lr, [sp]
A0804306  B002     		add sp, sp, #8

A0804308  4770     		bx lr

**************************************************
	List program: ParCheck
**************************************************

PROGRAM ParCheck

END_PROGRAM

A0804310  B082     		sub sp, sp, #8
A0804312  F8CD E000		str lr, [sp]
A0804316  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:ParCheck}
#1		(*$WAITSWITCH$*)
#2		
#3		
#4			(* IF Par_POLI AND 16#fc00) <> 2048 *)
#5			LD		Par_POLI	{LNXT:2|-1|-1}
(*) UNDEF
A080431A  F8DF 7034		ldr r7, [pc, #+52] ; 0x10000182
A080431E  8838     		ldrh r0, [r7]

#6			AND		16#fc00	{LNXT:2|-1|-1}
(*) UINT
A0804320  F44F 477C		mov r7, #64512 ; 64512
A0804324  4038     		and r0, r0, r7

#7			NE		2048	{LNXT:2|-1|-1}
(*) UINT
A0804326  F44F 6700		mov r7, #2048 ; 2048
A080432A  42B8     		cmp r0, r7
A080432C  BF08 2000		eqmov r0, #0
A0804330  BF18 2001		nemov r0, #1

#8			JMPCN	$label0	{LNXT:2|3|2}
(-) BOOL
A0804334  2800     		cmp r0, #0
A0804336  D005     		beq #10 ; 0xA0804344


#9		
#10			(* THEN *)
#11		
#12				(* WHILE TRUE *)
#13		$label1:
#14				LD		TRUE	{LNXT:3|-1|-1}
(-) UNDEF
A080433A  2001     		mov r0, #1 ; 1

#15				JMPCN		$label2	{LNXT:3|2|2}
(-) BOOL
A080433C  2800     		cmp r0, #0
A080433E  D001     		beq #2 ; 0xA0804344


#16		
#17				(* DO *)
#18					JMP		$label1	{LNXT:3|2|2}
(-) BOOL
A0804342  E7FA     		b #-12 ; 0xA080433A

A0804344  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A0804348  F8DD E000		ldr lr, [sp]
A080434C  B002     		add sp, sp, #8

A080434E  4770     		bx lr

A0804350  FFFFFFFF		; 0x10000182

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
A0804354  4770     		bx lr


*** OUTPUT:
A0804356  4770     		bx lr



**************************************************
	Task Init init code
**************************************************

A0804358  B082     		sub sp, sp, #8
A080435A  F8CD E000		str lr, [sp]
A080435E  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A0804362  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A0804366  F8DD E000		ldr lr, [sp]
A080436A  B002     		add sp, sp, #8

A080436C  4770     		bx lr

**************************************************
	List program: InitParDB
**************************************************

PROGRAM InitParDB

        VAR
warningsKiller : USINT;
dummyCrc32 : UDINT;
	END_VAR

END_PROGRAM

A0804380  B082     		sub sp, sp, #8
A0804382  F8CD E000		str lr, [sp]
A0804386  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:InitParDB}
#1		(*$WAITSWITCH$*)
#2		
#3			(* dummyCrc32 := 1334993903; *)
#4			MOVE		1334993903,dummyCrc32	{LNXT:3|5|-1}
(*) UDINT
A080438A  F8DF 7034		ldr r7, [pc, #+52] ; 0x4F9263EF
A080438E  4638     		mov r0, r7
A0804390  F8DF 7034		ldr r7, [pc, #+52] ; 0xA0A0000C
A0804394  6038     		str r0, [r7]

#5		
#6			(* warningsKiller := sysDBase_SetExtTable( ADR( $$ParDB ), $$ParDBLength ); *)
#7			ADR		$$ParDB	{LNXT:5|3|-1}
(*) UDINT
A0804396  F8DF 002C		ldr r0, [pc, #+44] ; 0xA08000C0

#8			sysDBase_SetExtTable		$$ParDBLength	{LNXT:5|3|-1}
(*) @USINT
A080439A  4607     		mov r7, r0
A080439C  4638     		mov r0, r7
A080439E  2707     		mov r7, #7 ; 7
A08043A0  4639     		mov r1, r7
A08043A2  F8DF 402C		ldr r4, [pc, #+44] ; 0x135F1
A08043A6  F044 0401		orr r4, r4, #1
A08043AA  47A0     		blx r4

#9			ST		warningsKiller	{LNXT:5|3|-1}
(*) USINT
A08043AC  F8DF 701C		ldr r7, [pc, #+28] ; 0xA0A00010
A08043B0  7038     		strb r0, [r7]

A08043B2  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A08043B6  F8DD E000		ldr lr, [sp]
A08043BA  B002     		add sp, sp, #8

A08043BC  4770     		bx lr

A08043C0  4F9263EF		; 0x4F9263EF
A08043C4  A08000C0		; 0xA08000C0
A08043C8  A0A0000C		; 0xA0A0000C
A08043CC  A0A00010		; 0xA0A00010
A08043D0  FFFFFFFF		; 0x000135F1

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
A08043D4  4770     		bx lr


*** OUTPUT:
A08043D6  4770     		bx lr



**************************************************
	Task Serv init code
**************************************************

A08043D8  B082     		sub sp, sp, #8
A08043DA  F8CD E000		str lr, [sp]
A08043DE  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A08043E2  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A08043E6  F8DD E000		ldr lr, [sp]
A08043EA  B002     		add sp, sp, #8

A08043EC  4770     		bx lr



**************************************************
	Global init code
**************************************************

A0804400  B082     		sub sp, sp, #8
A0804402  F8CD E000		str lr, [sp]
A0804406  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A080440A  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A080440E  F8DD E000		ldr lr, [sp]
A0804412  B002     		add sp, sp, #8

A0804414  4770     		bx lr



**************************************************
	Global RETAIN init code
**************************************************

A0804416  B082     		sub sp, sp, #8
A0804418  F8CD E000		str lr, [sp]
A080441C  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A0804420  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A0804424  F8DD E000		ldr lr, [sp]
A0804428  B002     		add sp, sp, #8

A080442A  4770     		bx lr



********************************************
MEMORY MAP
********************************************

Code area type:          		       main code
Start code area:          		00000000A0800000h
End code area:            		00000000A08044CCh
Code size:                		000044CCh

Start local data area:    		00000000A0A00000h
End local data area:      		00000000A0A00011h
Local data size:          		00000011h

Start retentive data area:		0000000000000000h
End retentive data area:  		0000000000000000h
Retentive data size:      		00000000h

Start bit data area:      		0000000000000000h
End bit data area:        		0000000000000000h
Bit data size:            		00000000h



********************************************
CODE ID:                                FF25F13F
DEBUG MEMO ID:                          A0805202
FULL MEMO ID:                           0000C826
********************************************
