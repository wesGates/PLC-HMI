***********************************************************************
*
*	CODE GENERATION LISTING FOR: M172-PLC
*	COMPILER VERSION: 5.20.0.53
*
***********************************************************************

**************************************************
	CODE GENERATOR SUBROUTINES
**************************************************

$$MOD:
A08041E0  FB90 F3F1		sdiv r3, r0, r1
A08041E4  4359     		mul r1, r1, r3
A08041E6  EBC1 0000		rsb r0, r1, r0
A08041EA  4770     		bx lr

$$MOD_U:
A08041EC  FBB0 F3F1		udiv r3, r0, r1
A08041F0  4359     		mul r1, r1, r3
A08041F2  EBC1 0000		rsb r0, r1, r0
A08041F6  4770     		bx lr

**************************************************
	List function block: TON
**************************************************

FUNCTION_BLOCK TON

	{ DE:"<HTML>The TON block produces a delayed output Q of the input IN. The delay time is expressed in milliseconds on the PT input.</br></br>
<img src= tonscheme.png>
<ul>
<li>if IN is FALSE Q is false</li>
<li>Q becomes TRUE as IN remains TRUE for PT milliseconds</li>
<li>Q remains TRUE until IN remains TRUE</li>
</ul>" }

        VAR_INPUT
IN : BOOL;	{ DE:"Timer input source" }
PT : UDINT;	{ DE:"Preset time value (ms)" }
	END_VAR

        VAR_OUTPUT
Q : BOOL;	{ DE:"Timer output" }
ET : UDINT;	{ DE:"Timer current value (ms)" }
	END_VAR

        VAR_EXTERNAL
	{G:"System_Timers"}
sysTimer AT %MD0.0 : UDINT;	{ DE:"System timer [ms]" }
	END_VAR

        VAR
timStart : UDINT;	{ DE:"Time value at start of counting" }
	END_VAR

END_FUNCTION_BLOCK

A08041F8  E92D 4040		stmdb sp!, { r6, lr }
A08041FC  462E     		mov r6, r5

#0		{SRC:TON}
#1		
#2			(*	Check if in counting	*)
#3		
#4			LD		IN
(*) UNDEF
A08041FE  F8DF 7084		ldr r7, [pc, #+132] ; 0x4
A0804202  5DF0     		ldrb r0, [r6, +r7]

#5			JMPCN	lReset
(-) BOOL
A0804204  2800     		cmp r0, #0
A0804206  D031     		beq #98 ; 0xA080426C


#6		
#7			(*	Check if Q is TRUE *)
#8			LD		Q
(*) UNDEF
A080420A  F8DF 7080		ldr r7, [pc, #+128] ; 0xC
A080420E  5DF0     		ldrb r0, [r6, +r7]

#9			RETC
#10			
(-) BOOL
A0804210  2800     		cmp r0, #0
A0804212  D134     		bne #104 ; 0xA080427E


#11			(*	Check if already in counting *)
#12			LD		timStart
(-) UNDEF
A0804216  6830     		ldr r0, [r6]

#13			EQ		0
(*) UDINT
A0804218  2800     		cmp r0, #0
A080421A  BF18 2000		nemov r0, #0
A080421E  BF08 2001		eqmov r0, #1

#14			JMPCN	lUpdate
(-) BOOL
A0804222  2800     		cmp r0, #0
A0804224  D004     		beq #8 ; 0xA0804230


#15		
#16			(*	Start of counting *)
#17			LD		sysTimer
(*) UNDEF
A0804228  F8DF 7068		ldr r7, [pc, #+104] ; 0x1000052C
A080422C  6838     		ldr r0, [r7]

#18			ST		timStart
(-) UDINT
A080422E  6030     		str r0, [r6]

#19			
#20		lUpdate:
#21		
#22			(*	Update timer and check if time elapsed *)
#23			LD		sysTimer
(*) UNDEF
A0804230  F8DF 7060		ldr r7, [pc, #+96] ; 0x1000052C
A0804234  6838     		ldr r0, [r7]

#24			SUB		timStart
(*) UDINT
A0804236  6837     		ldr r7, [r6]
A0804238  1BC0     		sub r0, r0, r7

#25			ST		ET
(*) UDINT
A080423A  F8DF 7054		ldr r7, [pc, #+84] ; 0x10
A080423E  51F0     		str r0, [r6, +r7]

#26			GE		PT
(*) UDINT
A0804240  F8DF 7044		ldr r7, [pc, #+68] ; 0x8
A0804244  59F7     		ldr r7, [r6, +r7]
A0804246  42B8     		cmp r0, r7
A0804248  BF38 2000		lomov r0, #0
A080424C  BF28 2001		hsmov r0, #1

#27			ST		Q
(*) BOOL
A0804250  F8DF 7038		ldr r7, [pc, #+56] ; 0xC
A0804254  55F0     		strb r0, [r6, +r7]

#28			RETCN
#29		
(-) BOOL
A0804256  2800     		cmp r0, #0
A0804258  D011     		beq #34 ; 0xA080427E


#30			(*	Limit actual time value *)
#31			LD		PT
(*) UNDEF
A080425C  F8DF 7028		ldr r7, [pc, #+40] ; 0x8
A0804260  59F0     		ldr r0, [r6, +r7]

#32			ST		ET
(*) UDINT
A0804262  F8DF 702C		ldr r7, [pc, #+44] ; 0x10
A0804266  51F0     		str r0, [r6, +r7]

#33			RET
#34		
(-) UDINT
A0804268  E009     		b #18 ; 0xA080427E


#35		lReset:
#36		
#37			(*	Reset status *)
#38			LD		0
(-) UNDEF
A080426C  2000     		mov r0, #0 ; 0

#39			ST		ET
(*) USINT
A080426E  F8DF 7020		ldr r7, [pc, #+32] ; 0x10
A0804272  51F0     		str r0, [r6, +r7]

#40			ST		timStart
(-) UDINT
A0804274  6030     		str r0, [r6]

#41			LD		FALSE
(-) UNDEF
A0804276  2000     		mov r0, #0 ; 0

#42			ST		Q
(*) BOOL
A0804278  F8DF 7010		ldr r7, [pc, #+16] ; 0xC
A080427C  55F0     		strb r0, [r6, +r7]

A080427E  E8BD 4040		ldmia sp!, { r6, lr }

A0804282  4770     		bx lr

A0804284  00000004		; 0x00000004
A0804288  00000008		; 0x00000008
A080428C  0000000C		; 0x0000000C
A0804290  00000010		; 0x00000010
A0804294  FFFFFFFF		; 0x1000052C


Frame allocation:

	0000       : VAR timStart
	0004 bit  0: VAR IN
	0008       : VAR PT
	000C bit  0: VAR Q
	0010       : VAR ET

END_FUNCTION_BLOCK
**************************************************
	List program: main
**************************************************

PROGRAM main

END_PROGRAM

A08042A0  B082     		sub sp, sp, #8
A08042A2  F8CD E000		str lr, [sp]
A08042A6  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A08042AA  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A08042AE  F8DD E000		ldr lr, [sp]
A08042B2  B002     		add sp, sp, #8

A08042B4  4770     		bx lr

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
A08042B6  B082     		sub sp, sp, #8
A08042B8  F8CD E000		str lr, [sp]
A08042BC  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A08042C0  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A08042C4  F8DD E000		ldr lr, [sp]
A08042C8  B002     		add sp, sp, #8

A08042CA  4770     		bx lr


*** OUTPUT:
A08042CC  B082     		sub sp, sp, #8
A08042CE  F8CD E000		str lr, [sp]
A08042D2  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A08042D6  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A08042DA  F8DD E000		ldr lr, [sp]
A08042DE  B002     		add sp, sp, #8

A08042E0  4770     		bx lr



**************************************************
	Task Background init code
**************************************************

A08042E2  B082     		sub sp, sp, #8
A08042E4  F8CD E000		str lr, [sp]
A08042E8  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A08042EC  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A08042F0  F8DD E000		ldr lr, [sp]
A08042F4  B002     		add sp, sp, #8

A08042F6  4770     		bx lr

**************************************************
	List program: ParCheck
**************************************************

PROGRAM ParCheck

END_PROGRAM

A0804300  B082     		sub sp, sp, #8
A0804302  F8CD E000		str lr, [sp]
A0804306  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:ParCheck}
#1		(*$WAITSWITCH$*)
#2		
#3		
#4			(* IF Par_POLI AND 16#fc00) <> 2048 *)
#5			LD		Par_POLI	{LNXT:2|-1|-1}
(*) UNDEF
A080430A  F8DF 7034		ldr r7, [pc, #+52] ; 0x10000182
A080430E  8838     		ldrh r0, [r7]

#6			AND		16#fc00	{LNXT:2|-1|-1}
(*) UINT
A0804310  F44F 477C		mov r7, #64512 ; 64512
A0804314  4038     		and r0, r0, r7

#7			NE		2048	{LNXT:2|-1|-1}
(*) UINT
A0804316  F44F 6700		mov r7, #2048 ; 2048
A080431A  42B8     		cmp r0, r7
A080431C  BF08 2000		eqmov r0, #0
A0804320  BF18 2001		nemov r0, #1

#8			JMPCN	$label0	{LNXT:2|3|2}
(-) BOOL
A0804324  2800     		cmp r0, #0
A0804326  D005     		beq #10 ; 0xA0804334


#9		
#10			(* THEN *)
#11		
#12				(* WHILE TRUE *)
#13		$label1:
#14				LD		TRUE	{LNXT:3|-1|-1}
(-) UNDEF
A080432A  2001     		mov r0, #1 ; 1

#15				JMPCN		$label2	{LNXT:3|2|2}
(-) BOOL
A080432C  2800     		cmp r0, #0
A080432E  D001     		beq #2 ; 0xA0804334


#16		
#17				(* DO *)
#18					JMP		$label1	{LNXT:3|2|2}
(-) BOOL
A0804332  E7FA     		b #-12 ; 0xA080432A

A0804334  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A0804338  F8DD E000		ldr lr, [sp]
A080433C  B002     		add sp, sp, #8

A080433E  4770     		bx lr

A0804340  FFFFFFFF		; 0x10000182

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
A0804344  4770     		bx lr


*** OUTPUT:
A0804346  4770     		bx lr



**************************************************
	Task Init init code
**************************************************

A0804348  B082     		sub sp, sp, #8
A080434A  F8CD E000		str lr, [sp]
A080434E  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A0804352  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A0804356  F8DD E000		ldr lr, [sp]
A080435A  B002     		add sp, sp, #8

A080435C  4770     		bx lr

**************************************************
	List program: InitParDB
**************************************************

PROGRAM InitParDB

        VAR
warningsKiller : USINT;
dummyCrc32 : UDINT;
	END_VAR

END_PROGRAM

A0804370  B082     		sub sp, sp, #8
A0804372  F8CD E000		str lr, [sp]
A0804376  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:InitParDB}
#1		(*$WAITSWITCH$*)
#2		
#3			(* dummyCrc32 := 1229475968; *)
#4			MOVE		1229475968,dummyCrc32	{LNXT:3|5|-1}
(*) UDINT
A080437A  F8DF 7034		ldr r7, [pc, #+52] ; 0x49485080
A080437E  4638     		mov r0, r7
A0804380  F8DF 7038		ldr r7, [pc, #+56] ; 0xA0A00024
A0804384  6038     		str r0, [r7]

#5		
#6			(* warningsKiller := sysDBase_SetExtTable( ADR( $$ParDB ), $$ParDBLength ); *)
#7			ADR		$$ParDB	{LNXT:5|3|-1}
(*) UDINT
A0804386  F8DF 002C		ldr r0, [pc, #+44] ; 0xA08000E0

#8			sysDBase_SetExtTable		$$ParDBLength	{LNXT:5|3|-1}
(*) @USINT
A080438A  4607     		mov r7, r0
A080438C  4638     		mov r0, r7
A080438E  2706     		mov r7, #6 ; 6
A0804390  4639     		mov r1, r7
A0804392  F8DF 402C		ldr r4, [pc, #+44] ; 0x135F1
A0804396  F044 0401		orr r4, r4, #1
A080439A  47A0     		blx r4

#9			ST		warningsKiller	{LNXT:5|3|-1}
(*) USINT
A080439C  F8DF 7018		ldr r7, [pc, #+24] ; 0xA0A0000D
A08043A0  7038     		strb r0, [r7]

A08043A2  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A08043A6  F8DD E000		ldr lr, [sp]
A08043AA  B002     		add sp, sp, #8

A08043AC  4770     		bx lr

A08043B0  49485080		; 0x49485080
A08043B4  A08000E0		; 0xA08000E0
A08043B8  A0A0000D		; 0xA0A0000D
A08043BC  A0A00024		; 0xA0A00024
A08043C0  FFFFFFFF		; 0x000135F1

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
A08043C4  4770     		bx lr


*** OUTPUT:
A08043C6  4770     		bx lr



**************************************************
	Task Serv init code
**************************************************

A08043C8  B082     		sub sp, sp, #8
A08043CA  F8CD E000		str lr, [sp]
A08043CE  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A08043D2  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A08043D6  F8DD E000		ldr lr, [sp]
A08043DA  B002     		add sp, sp, #8

A08043DC  4770     		bx lr

**************************************************
	List program: RegTemp
**************************************************

PROGRAM RegTemp

END_PROGRAM

A08043F0  B082     		sub sp, sp, #8
A08043F2  F8CD E000		str lr, [sp]
A08043F6  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:RegTemp}
#1		(*$WAITSWITCH$*)
#2		
#3		
#4			(* IF iTempProbe > (iSetpointCooling + iDifferential) OR xForceCooling OR xForceRemote *)
#5			LD		iTempProbe	{LNXT:3|-1|-1}
(*) UNDEF
A08043FA  F8DF 708C		ldr r7, [pc, #+140] ; 0xA0A0000E
A08043FE  F9B7 0000		ldrsh r0, [r7]

#6			GT(		iSetpointCooling	{LNXT:3|-1|-1}
(*) INT
A0804402  B082     		sub sp, sp, #8
A0804404  F8CD 0000		str r0, [sp]
A0804408  F8DF 706C		ldr r7, [pc, #+108] ; 0xA00017E8
A080440C  F9B7 0000		ldrsh r0, [r7]

#7			ADD		iDifferential	{LNXT:3|-1|-1}
(*) INT
A0804410  F8DF 7068		ldr r7, [pc, #+104] ; 0xA00017EA
A0804414  F9B7 7000		ldrsh r7, [r7]
A0804418  19C0     		add r0, r0, r7

#8			)	{LNXT:3|-1|-1}
(*) INT
A080441A  4607     		mov r7, r0
A080441C  F8DD 0000		ldr r0, [sp]
A0804420  B002     		add sp, sp, #8
A0804422  42B8     		cmp r0, r7
A0804424  BFD8 2000		lemov r0, #0
A0804428  BFC8 2001		gtmov r0, #1

#9			OR		xForceCooling	{LNXT:3|-1|-1}
(*) BOOL
A080442C  F8DF 7050		ldr r7, [pc, #+80] ; 0xA0003EFC
A0804430  783F     		ldrb r7, [r7]
A0804432  4338     		orr r0, r0, r7

#10			OR		xForceRemote	{LNXT:3|-1|-1}
(*) BOOL
A0804434  F8DF 7054		ldr r7, [pc, #+84] ; 0xA0A00028
A0804438  783F     		ldrb r7, [r7]
A080443A  4338     		orr r0, r0, r7

#11			JMPCN	$label0	{LNXT:3|4|5}
(-) BOOL
A080443C  2800     		cmp r0, #0
A080443E  D006     		beq #12 ; 0xA080444E


#12		
#13			(* THEN *)
#14		
#15				(* xRequestCooling := TRUE; *)
#16				MOVE		TRUE,xRequestCooling	{LNXT:4|3|-1}
(*) BOOL
A0804442  2001     		mov r0, #1 ; 1
A0804444  F8DF 703C		ldr r7, [pc, #+60] ; 0xA0A0000C
A0804448  7038     		strb r0, [r7]

#17				JMP		$label1	{LNXT:3|4|5}
(-) BOOL
A080444A  E014     		b #40 ; 0xA0804476


#18		$label0:
#19		
#20			(* ELSIF iTempProbe < iSetpointCooling *)
#21			LD		iTempProbe	{LNXT:5|-1|-1}
(*) UNDEF
A080444E  F8DF 7038		ldr r7, [pc, #+56] ; 0xA0A0000E
A0804452  F9B7 0000		ldrsh r0, [r7]

#22			LT		iSetpointCooling	{LNXT:5|-1|-1}
(*) INT
A0804456  F8DF 7020		ldr r7, [pc, #+32] ; 0xA00017E8
A080445A  F9B7 7000		ldrsh r7, [r7]
A080445E  42B8     		cmp r0, r7
A0804460  BFA8 2000		gemov r0, #0
A0804464  BFB8 2001		ltmov r0, #1

#23			JMPCN	$label1	{LNXT:5|6|3}
(-) BOOL
A0804468  2800     		cmp r0, #0
A080446A  D004     		beq #8 ; 0xA0804476


#24		
#25			(* THEN *)
#26		
#27				(* xRequestCooling := FALSE; *)
#28				MOVE		FALSE,xRequestCooling	{LNXT:6|3|-1}
(*) BOOL
A080446E  2000     		mov r0, #0 ; 0
A0804470  F8DF 7010		ldr r7, [pc, #+16] ; 0xA0A0000C
A0804474  7038     		strb r0, [r7]

A0804476  E00B     		b #22

A0804478  FFFFFFFF		; 0xA00017E8
A080447C  FFFFFFFF		; 0xA00017EA
A0804480  FFFFFFFF		; 0xA0003EFC
A0804484  A0A0000C		; 0xA0A0000C
A0804488  A0A0000E		; 0xA0A0000E
A080448C  A0A00028		; 0xA0A00028

END_PROGRAM
**************************************************
	List program: DO_Delay
**************************************************

PROGRAM DO_Delay

        VAR
DO_del : TON;
	END_VAR

END_PROGRAM

#0		{SRC:DO_Delay}
#1		
#2		
#3		
#4		(*** Network 1 ***)
#5		
#6		(* Call for FB TON instance DO_DEL *)
#7		MOVE	XREQUESTCOOLING,DO_DEL.IN	{R:"1$FB:DO_DEL"}
(*) UDINT
A0804490  F8DF 705C		ldr r7, [pc, #+92] ; 0xA0A0000C
A0804494  7838     		ldrb r0, [r7]
A0804496  F8DF 7060		ldr r7, [pc, #+96] ; 0xA0A00014
A080449A  7038     		strb r0, [r7]

#8		MOVE	UIDELAY,DO_DEL.PT	{R:"1$FB:DO_DEL"}
(*) BOOL
A080449C  F8DF 7044		ldr r7, [pc, #+68] ; 0xA00017EC
A08044A0  8838     		ldrh r0, [r7]
A08044A2  F8DF 7058		ldr r7, [pc, #+88] ; 0xA0A00018
A08044A6  6038     		str r0, [r7]

#9		CAL	DO_DEL	{R:"1$FB:DO_DEL"}
(*) UDINT
A08044A8  E92D 0021		stmdb sp!, { r0, r5 }
A08044AC  F8DF 7044		ldr r7, [pc, #+68] ; 0xA0A00010
A08044B0  463D     		mov r5, r7
A08044B2  F8DF 4038		ldr r4, [pc, #+56] ; 0xA08041F8
A08044B6  F044 0401		orr r4, r4, #1
A08044BA  47A0     		blx r4
A08044BC  E8BD 0021		ldmia sp!, { r0, r5 }

#10		MOVE	DO_DEL.Q,XOUTPUTCOOLING	{R:"1$FB:DO_DEL"}
(*) UDINT
A08044C0  F8DF 703C		ldr r7, [pc, #+60] ; 0xA0A0001C
A08044C4  7838     		ldrb r0, [r7]
A08044C6  F8DF 7020		ldr r7, [pc, #+32] ; 0xA0003EF8
A08044CA  7038     		strb r0, [r7]

#11		MOVE	DO_DEL.Q,XCOOLING	{R:"1$FB:DO_DEL"}
(*) BOOL
A08044CC  F8DF 7030		ldr r7, [pc, #+48] ; 0xA0A0001C
A08044D0  7838     		ldrb r0, [r7]
A08044D2  F8DF 7030		ldr r7, [pc, #+48] ; 0x1000041A
A08044D6  7038     		strb r0, [r7]

A08044D8  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A08044DC  F8DD E000		ldr lr, [sp]
A08044E0  B002     		add sp, sp, #8

A08044E2  4770     		bx lr

A08044E4  FFFFFFFF		; 0xA00017EC
A08044E8  FFFFFFFF		; 0xA0003EF8
A08044EC  A08041F8		; 0xA08041F8
A08044F0  A0A0000C		; 0xA0A0000C
A08044F4  A0A00010		; 0xA0A00010
A08044F8  A0A00014		; 0xA0A00014
A08044FC  A0A00018		; 0xA0A00018
A0804500  A0A0001C		; 0xA0A0001C
A0804504  FFFFFFFF		; 0x1000041A

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
A0804508  B082     		sub sp, sp, #8
A080450A  F8CD E000		str lr, [sp]
A080450E  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A0804512  F8DF 7030		ldr r7, [pc, #+48] ; 0x10000438
A0804516  8838     		ldrh r0, [r7]
A0804518  F8DF 701C		ldr r7, [pc, #+28] ; 0xA0A0000E
A080451C  8038     		strh r0, [r7]

A080451E  F8DF 7020		ldr r7, [pc, #+32] ; 0x10000406
A0804522  7838     		ldrb r0, [r7]
A0804524  F8DF 7014		ldr r7, [pc, #+20] ; 0xA0A00028
A0804528  7038     		strb r0, [r7]

A080452A  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A080452E  F8DD E000		ldr lr, [sp]
A0804532  B002     		add sp, sp, #8

A0804534  4770     		bx lr

A0804538  A0A0000E		; 0xA0A0000E
A080453C  A0A00028		; 0xA0A00028
A0804540  FFFFFFFF		; 0x10000406
A0804544  FFFFFFFF		; 0x10000438


*** OUTPUT:
A0804548  B082     		sub sp, sp, #8
A080454A  F8CD E000		str lr, [sp]
A080454E  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A0804552  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A0804556  F8DD E000		ldr lr, [sp]
A080455A  B002     		add sp, sp, #8

A080455C  4770     		bx lr



**************************************************
	Task Timed init code
**************************************************

A080455E  B082     		sub sp, sp, #8
A0804560  F8CD E000		str lr, [sp]
A0804564  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A0804568  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A080456C  F8DD E000		ldr lr, [sp]
A0804570  B002     		add sp, sp, #8

A0804572  4770     		bx lr



**************************************************
	Global init code
**************************************************

A0804580  B082     		sub sp, sp, #8
A0804582  F8CD E000		str lr, [sp]
A0804586  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A080458A  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A080458E  F8DD E000		ldr lr, [sp]
A0804592  B002     		add sp, sp, #8

A0804594  4770     		bx lr



**************************************************
	Global RETAIN init code
**************************************************

A0804596  B082     		sub sp, sp, #8
A0804598  F8CD E000		str lr, [sp]
A080459C  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A08045A0  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A08045A4  F8DD E000		ldr lr, [sp]
A08045A8  B002     		add sp, sp, #8

A08045AA  4770     		bx lr



********************************************
MEMORY MAP
********************************************

Code area type:          		       main code
Start code area:          		00000000A0800000h
End code area:            		00000000A08046E8h
Code size:                		000046E8h

Start local data area:    		00000000A0A00000h
End local data area:      		00000000A0A00029h
Local data size:          		00000029h

Start retentive data area:		0000000000000000h
End retentive data area:  		0000000000000000h
Retentive data size:      		00000000h

Start bit data area:      		0000000000000000h
End bit data area:        		0000000000000000h
Bit data size:            		00000000h



********************************************
CODE ID:                                07A8061A
DEBUG MEMO ID:                          A0805202
FULL MEMO ID:                           0000C826
********************************************
