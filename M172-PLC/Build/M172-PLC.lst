***********************************************************************
*
*	CODE GENERATION LISTING FOR: M172-PLC
*	COMPILER VERSION: 5.20.0.53
*
***********************************************************************

**************************************************
	CODE GENERATOR SUBROUTINES
**************************************************

$$MOD:
A09041E0  FB90 F3F1		sdiv r3, r0, r1
A09041E4  4359     		mul r1, r1, r3
A09041E6  EBC1 0000		rsb r0, r1, r0
A09041EA  4770     		bx lr

$$MOD_U:
A09041EC  FBB0 F3F1		udiv r3, r0, r1
A09041F0  4359     		mul r1, r1, r3
A09041F2  EBC1 0000		rsb r0, r1, r0
A09041F6  4770     		bx lr

**************************************************
	List function block: TON
**************************************************

FUNCTION_BLOCK TON

	{ DE:"<HTML>The TON block produces a delayed output Q of the input IN. The delay time is expressed in milliseconds on the PT input.</br></br>
<img src= tonscheme.png>
<ul>
<li>if IN is FALSE Q is false</li>
<li>Q becomes TRUE as IN remains TRUE for PT milliseconds</li>
<li>Q remains TRUE until IN remains TRUE</li>
</ul>" }

        VAR_INPUT
IN : BOOL;	{ DE:"Timer input source" }
PT : UDINT;	{ DE:"Preset time value (ms)" }
	END_VAR

        VAR_OUTPUT
Q : BOOL;	{ DE:"Timer output" }
ET : UDINT;	{ DE:"Timer current value (ms)" }
	END_VAR

        VAR_EXTERNAL
	{G:"System_Timers"}
sysTimer AT %MD0.0 : UDINT;	{ DE:"System timer [ms]" }
	END_VAR

        VAR
timStart : UDINT;	{ DE:"Time value at start of counting" }
	END_VAR

END_FUNCTION_BLOCK

A09041F8  E92D 4040		stmdb sp!, { r6, lr }
A09041FC  462E     		mov r6, r5

#0		{SRC:TON}
#1		
#2			(*	Check if in counting	*)
#3		
#4			LD		IN
(*) UNDEF
A09041FE  F8DF 7084		ldr r7, [pc, #+132] ; 0x4
A0904202  5DF0     		ldrb r0, [r6, +r7]

#5			JMPCN	lReset
(-) BOOL
A0904204  2800     		cmp r0, #0
A0904206  D031     		beq #98 ; 0xA090426C


#6		
#7			(*	Check if Q is TRUE *)
#8			LD		Q
(*) UNDEF
A090420A  F8DF 7080		ldr r7, [pc, #+128] ; 0xC
A090420E  5DF0     		ldrb r0, [r6, +r7]

#9			RETC
#10			
(-) BOOL
A0904210  2800     		cmp r0, #0
A0904212  D134     		bne #104 ; 0xA090427E


#11			(*	Check if already in counting *)
#12			LD		timStart
(-) UNDEF
A0904216  6830     		ldr r0, [r6]

#13			EQ		0
(*) UDINT
A0904218  2800     		cmp r0, #0
A090421A  BF18 2000		nemov r0, #0
A090421E  BF08 2001		eqmov r0, #1

#14			JMPCN	lUpdate
(-) BOOL
A0904222  2800     		cmp r0, #0
A0904224  D004     		beq #8 ; 0xA0904230


#15		
#16			(*	Start of counting *)
#17			LD		sysTimer
(*) UNDEF
A0904228  F8DF 7068		ldr r7, [pc, #+104] ; 0x1000052C
A090422C  6838     		ldr r0, [r7]

#18			ST		timStart
(-) UDINT
A090422E  6030     		str r0, [r6]

#19			
#20		lUpdate:
#21		
#22			(*	Update timer and check if time elapsed *)
#23			LD		sysTimer
(*) UNDEF
A0904230  F8DF 7060		ldr r7, [pc, #+96] ; 0x1000052C
A0904234  6838     		ldr r0, [r7]

#24			SUB		timStart
(*) UDINT
A0904236  6837     		ldr r7, [r6]
A0904238  1BC0     		sub r0, r0, r7

#25			ST		ET
(*) UDINT
A090423A  F8DF 7054		ldr r7, [pc, #+84] ; 0x10
A090423E  51F0     		str r0, [r6, +r7]

#26			GE		PT
(*) UDINT
A0904240  F8DF 7044		ldr r7, [pc, #+68] ; 0x8
A0904244  59F7     		ldr r7, [r6, +r7]
A0904246  42B8     		cmp r0, r7
A0904248  BF38 2000		lomov r0, #0
A090424C  BF28 2001		hsmov r0, #1

#27			ST		Q
(*) BOOL
A0904250  F8DF 7038		ldr r7, [pc, #+56] ; 0xC
A0904254  55F0     		strb r0, [r6, +r7]

#28			RETCN
#29		
(-) BOOL
A0904256  2800     		cmp r0, #0
A0904258  D011     		beq #34 ; 0xA090427E


#30			(*	Limit actual time value *)
#31			LD		PT
(*) UNDEF
A090425C  F8DF 7028		ldr r7, [pc, #+40] ; 0x8
A0904260  59F0     		ldr r0, [r6, +r7]

#32			ST		ET
(*) UDINT
A0904262  F8DF 702C		ldr r7, [pc, #+44] ; 0x10
A0904266  51F0     		str r0, [r6, +r7]

#33			RET
#34		
(-) UDINT
A0904268  E009     		b #18 ; 0xA090427E


#35		lReset:
#36		
#37			(*	Reset status *)
#38			LD		0
(-) UNDEF
A090426C  2000     		mov r0, #0 ; 0

#39			ST		ET
(*) USINT
A090426E  F8DF 7020		ldr r7, [pc, #+32] ; 0x10
A0904272  51F0     		str r0, [r6, +r7]

#40			ST		timStart
(-) UDINT
A0904274  6030     		str r0, [r6]

#41			LD		FALSE
(-) UNDEF
A0904276  2000     		mov r0, #0 ; 0

#42			ST		Q
(*) BOOL
A0904278  F8DF 7010		ldr r7, [pc, #+16] ; 0xC
A090427C  55F0     		strb r0, [r6, +r7]

A090427E  E8BD 4040		ldmia sp!, { r6, lr }

A0904282  4770     		bx lr

A0904284  00000004		; 0x00000004
A0904288  00000008		; 0x00000008
A090428C  0000000C		; 0x0000000C
A0904290  00000010		; 0x00000010
A0904294  FFFFFFFF		; 0x1000052C


Frame allocation:

	0000       : VAR timStart
	0004 bit  0: VAR IN
	0008       : VAR PT
	000C bit  0: VAR Q
	0010       : VAR ET

END_FUNCTION_BLOCK
**************************************************
	List program: main
**************************************************

PROGRAM main

END_PROGRAM

A09042A0  B082     		sub sp, sp, #8
A09042A2  F8CD E000		str lr, [sp]
A09042A6  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:main}
#1		(*$WAITSWITCH$*)
#2		
#3			(* cnt := cnt + 1; *)
#4			LD		cnt	{LNXT:2|2|-1}
(*) UNDEF
A09042AA  F8DF 701C		ldr r7, [pc, #+28] ; 0xA0A0000E
A09042AE  F9B7 0000		ldrsh r0, [r7]

#5			ADD		1	{LNXT:2|2|-1}
(-) INT
A09042B2  1C40     		add r0, r0, #1

#6			ST		cnt	{LNXT:2|2|-1}
(*) INT
A09042B4  F8DF 7010		ldr r7, [pc, #+16] ; 0xA0A0000E
A09042B8  8038     		strh r0, [r7]

A09042BA  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A09042BE  F8DD E000		ldr lr, [sp]
A09042C2  B002     		add sp, sp, #8

A09042C4  4770     		bx lr

A09042C8  A0A0000E		; 0xA0A0000E

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
A09042CC  B082     		sub sp, sp, #8
A09042CE  F8CD E000		str lr, [sp]
A09042D2  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A09042D6  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A09042DA  F8DD E000		ldr lr, [sp]
A09042DE  B002     		add sp, sp, #8

A09042E0  4770     		bx lr


*** OUTPUT:
A09042E2  B082     		sub sp, sp, #8
A09042E4  F8CD E000		str lr, [sp]
A09042E8  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A09042EC  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A09042F0  F8DD E000		ldr lr, [sp]
A09042F4  B002     		add sp, sp, #8

A09042F6  4770     		bx lr



**************************************************
	Task Background init code
**************************************************

A09042F8  B082     		sub sp, sp, #8
A09042FA  F8CD E000		str lr, [sp]
A09042FE  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A0904302  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A0904306  F8DD E000		ldr lr, [sp]
A090430A  B002     		add sp, sp, #8

A090430C  4770     		bx lr

**************************************************
	List program: ParCheck
**************************************************

PROGRAM ParCheck

END_PROGRAM

A0904320  B082     		sub sp, sp, #8
A0904322  F8CD E000		str lr, [sp]
A0904326  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:ParCheck}
#1		(*$WAITSWITCH$*)
#2		
#3		
#4			(* IF Par_POLI AND 16#fc00) <> 2048 *)
#5			LD		Par_POLI	{LNXT:2|-1|-1}
(*) UNDEF
A090432A  F8DF 7034		ldr r7, [pc, #+52] ; 0x10000182
A090432E  8838     		ldrh r0, [r7]

#6			AND		16#fc00	{LNXT:2|-1|-1}
(*) UINT
A0904330  F44F 477C		mov r7, #64512 ; 64512
A0904334  4038     		and r0, r0, r7

#7			NE		2048	{LNXT:2|-1|-1}
(*) UINT
A0904336  F44F 6700		mov r7, #2048 ; 2048
A090433A  42B8     		cmp r0, r7
A090433C  BF08 2000		eqmov r0, #0
A0904340  BF18 2001		nemov r0, #1

#8			JMPCN	$label0	{LNXT:2|3|2}
(-) BOOL
A0904344  2800     		cmp r0, #0
A0904346  D005     		beq #10 ; 0xA0904354


#9		
#10			(* THEN *)
#11		
#12				(* WHILE TRUE *)
#13		$label1:
#14				LD		TRUE	{LNXT:3|-1|-1}
(-) UNDEF
A090434A  2001     		mov r0, #1 ; 1

#15				JMPCN		$label2	{LNXT:3|2|2}
(-) BOOL
A090434C  2800     		cmp r0, #0
A090434E  D001     		beq #2 ; 0xA0904354


#16		
#17				(* DO *)
#18					JMP		$label1	{LNXT:3|2|2}
(-) BOOL
A0904352  E7FA     		b #-12 ; 0xA090434A

A0904354  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A0904358  F8DD E000		ldr lr, [sp]
A090435C  B002     		add sp, sp, #8

A090435E  4770     		bx lr

A0904360  FFFFFFFF		; 0x10000182

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
A0904364  4770     		bx lr


*** OUTPUT:
A0904366  4770     		bx lr



**************************************************
	Task Init init code
**************************************************

A0904368  B082     		sub sp, sp, #8
A090436A  F8CD E000		str lr, [sp]
A090436E  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A0904372  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A0904376  F8DD E000		ldr lr, [sp]
A090437A  B002     		add sp, sp, #8

A090437C  4770     		bx lr

**************************************************
	List program: InitParDB
**************************************************

PROGRAM InitParDB

        VAR
warningsKiller : USINT;
dummyCrc32 : UDINT;
	END_VAR

END_PROGRAM

A0904390  B082     		sub sp, sp, #8
A0904392  F8CD E000		str lr, [sp]
A0904396  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:InitParDB}
#1		(*$WAITSWITCH$*)
#2		
#3			(* dummyCrc32 := 1229475968; *)
#4			MOVE		1229475968,dummyCrc32	{LNXT:3|5|-1}
(*) UDINT
A090439A  F8DF 7034		ldr r7, [pc, #+52] ; 0x49485080
A090439E  4638     		mov r0, r7
A09043A0  F8DF 7038		ldr r7, [pc, #+56] ; 0xA0A00024
A09043A4  6038     		str r0, [r7]

#5		
#6			(* warningsKiller := sysDBase_SetExtTable( ADR( $$ParDB ), $$ParDBLength ); *)
#7			ADR		$$ParDB	{LNXT:5|3|-1}
(*) UDINT
A09043A6  F8DF 002C		ldr r0, [pc, #+44] ; 0xA09000E0

#8			sysDBase_SetExtTable		$$ParDBLength	{LNXT:5|3|-1}
(*) @USINT
A09043AA  4607     		mov r7, r0
A09043AC  4638     		mov r0, r7
A09043AE  2706     		mov r7, #6 ; 6
A09043B0  4639     		mov r1, r7
A09043B2  F8DF 402C		ldr r4, [pc, #+44] ; 0x135F1
A09043B6  F044 0401		orr r4, r4, #1
A09043BA  47A0     		blx r4

#9			ST		warningsKiller	{LNXT:5|3|-1}
(*) USINT
A09043BC  F8DF 7018		ldr r7, [pc, #+24] ; 0xA0A0000D
A09043C0  7038     		strb r0, [r7]

A09043C2  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A09043C6  F8DD E000		ldr lr, [sp]
A09043CA  B002     		add sp, sp, #8

A09043CC  4770     		bx lr

A09043D0  49485080		; 0x49485080
A09043D4  A09000E0		; 0xA09000E0
A09043D8  A0A0000D		; 0xA0A0000D
A09043DC  A0A00024		; 0xA0A00024
A09043E0  FFFFFFFF		; 0x000135F1

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
A09043E4  4770     		bx lr


*** OUTPUT:
A09043E6  4770     		bx lr



**************************************************
	Task Serv init code
**************************************************

A09043E8  B082     		sub sp, sp, #8
A09043EA  F8CD E000		str lr, [sp]
A09043EE  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A09043F2  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A09043F6  F8DD E000		ldr lr, [sp]
A09043FA  B002     		add sp, sp, #8

A09043FC  4770     		bx lr

**************************************************
	List program: RegTemp
**************************************************

PROGRAM RegTemp

END_PROGRAM

A0904410  B082     		sub sp, sp, #8
A0904412  F8CD E000		str lr, [sp]
A0904416  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:RegTemp}
#1		(*$WAITSWITCH$*)
#2		
#3		
#4			(* IF iTempProbe > (iSetpointCooling + iDifferential) OR xForceCooling OR xForceRemote *)
#5			LD		iTempProbe	{LNXT:3|-1|-1}
(*) UNDEF
A090441A  F8DF 70A0		ldr r7, [pc, #+160] ; 0xA0A00028
A090441E  F9B7 0000		ldrsh r0, [r7]

#6			GT(		iSetpointCooling	{LNXT:3|-1|-1}
(*) INT
A0904422  B082     		sub sp, sp, #8
A0904424  F8CD 0000		str r0, [sp]
A0904428  F8DF 707C		ldr r7, [pc, #+124] ; 0xA00017E8
A090442C  F9B7 0000		ldrsh r0, [r7]

#7			ADD		iDifferential	{LNXT:3|-1|-1}
(*) INT
A0904430  F8DF 7078		ldr r7, [pc, #+120] ; 0xA00017EA
A0904434  F9B7 7000		ldrsh r7, [r7]
A0904438  19C0     		add r0, r0, r7

#8			)	{LNXT:3|-1|-1}
(*) INT
A090443A  4607     		mov r7, r0
A090443C  F8DD 0000		ldr r0, [sp]
A0904440  B002     		add sp, sp, #8
A0904442  42B8     		cmp r0, r7
A0904444  BFD8 2000		lemov r0, #0
A0904448  BFC8 2001		gtmov r0, #1

#9			OR		xForceCooling	{LNXT:3|-1|-1}
(*) BOOL
A090444C  F8DF 7064		ldr r7, [pc, #+100] ; 0xA0003EFC
A0904450  783F     		ldrb r7, [r7]
A0904452  4338     		orr r0, r0, r7

#10			OR		xForceRemote	{LNXT:3|-1|-1}
(*) BOOL
A0904454  F8DF 7068		ldr r7, [pc, #+104] ; 0xA0A0002A
A0904458  783F     		ldrb r7, [r7]
A090445A  4338     		orr r0, r0, r7

#11			JMPCN	$label0	{LNXT:3|4|5}
(-) BOOL
A090445C  2800     		cmp r0, #0
A090445E  D006     		beq #12 ; 0xA090446E


#12		
#13			(* THEN *)
#14		
#15				(* xRequestCooling := TRUE; *)
#16				MOVE		TRUE,xRequestCooling	{LNXT:4|9|-1}
(*) BOOL
A0904462  2001     		mov r0, #1 ; 1
A0904464  F8DF 7050		ldr r7, [pc, #+80] ; 0xA0A0000C
A0904468  7038     		strb r0, [r7]

#17				JMP		$label1	{LNXT:3|4|5}
(-) BOOL
A090446A  E014     		b #40 ; 0xA0904496


#18		$label0:
#19		
#20			(* ELSIF iTempProbe < iSetpointCooling *)
#21			LD		iTempProbe	{LNXT:5|-1|-1}
(*) UNDEF
A090446E  F8DF 704C		ldr r7, [pc, #+76] ; 0xA0A00028
A0904472  F9B7 0000		ldrsh r0, [r7]

#22			LT		iSetpointCooling	{LNXT:5|-1|-1}
(*) INT
A0904476  F8DF 7030		ldr r7, [pc, #+48] ; 0xA00017E8
A090447A  F9B7 7000		ldrsh r7, [r7]
A090447E  42B8     		cmp r0, r7
A0904480  BFA8 2000		gemov r0, #0
A0904484  BFB8 2001		ltmov r0, #1

#23			JMPCN	$label1	{LNXT:5|6|9}
(-) BOOL
A0904488  2800     		cmp r0, #0
A090448A  D004     		beq #8 ; 0xA0904496


#24		
#25			(* THEN *)
#26		
#27				(* xRequestCooling := FALSE; *)
#28				MOVE		FALSE,xRequestCooling	{LNXT:6|9|-1}
(*) BOOL
A090448E  2000     		mov r0, #0 ; 0
A0904490  F8DF 7024		ldr r7, [pc, #+36] ; 0xA0A0000C
A0904494  7038     		strb r0, [r7]

#29		
#30		$label1:
#31			(* END_IF *)
#32		
#33			(* iAmbTemp := iTempProbe; *)
#34			MOVE		iTempProbe,iAmbTemp	{LNXT:9|3|-1}
(*) BOOL
A0904496  F8DF 7024		ldr r7, [pc, #+36] ; 0xA0A00028
A090449A  F9B7 0000		ldrsh r0, [r7]
A090449E  F8DF 7010		ldr r7, [pc, #+16] ; 0xA0003EFA
A09044A2  8038     		strh r0, [r7]

A09044A4  E00E     		b #28

A09044A8  FFFFFFFF		; 0xA00017E8
A09044AC  FFFFFFFF		; 0xA00017EA
A09044B0  FFFFFFFF		; 0xA0003EFA
A09044B4  FFFFFFFF		; 0xA0003EFC
A09044B8  A0A0000C		; 0xA0A0000C
A09044BC  A0A00028		; 0xA0A00028
A09044C0  A0A0002A		; 0xA0A0002A

END_PROGRAM
**************************************************
	List program: DO_Delay
**************************************************

PROGRAM DO_Delay

        VAR
DO_del : TON;
	END_VAR

END_PROGRAM

#0		{SRC:DO_Delay}
#1		
#2		
#3		
#4		(*** Network 1 ***)
#5		
#6		(* Call for FB TON instance DO_DEL *)
#7		MOVE	XREQUESTCOOLING,DO_DEL.IN	{R:"1$FB:DO_DEL"}
(*) UDINT
A09044C4  F8DF 705C		ldr r7, [pc, #+92] ; 0xA0A0000C
A09044C8  7838     		ldrb r0, [r7]
A09044CA  F8DF 7060		ldr r7, [pc, #+96] ; 0xA0A00014
A09044CE  7038     		strb r0, [r7]

#8		MOVE	UIDELAY,DO_DEL.PT	{R:"1$FB:DO_DEL"}
(*) BOOL
A09044D0  F8DF 7044		ldr r7, [pc, #+68] ; 0xA00017EC
A09044D4  8838     		ldrh r0, [r7]
A09044D6  F8DF 7058		ldr r7, [pc, #+88] ; 0xA0A00018
A09044DA  6038     		str r0, [r7]

#9		CAL	DO_DEL	{R:"1$FB:DO_DEL"}
(*) UDINT
A09044DC  E92D 0021		stmdb sp!, { r0, r5 }
A09044E0  F8DF 7044		ldr r7, [pc, #+68] ; 0xA0A00010
A09044E4  463D     		mov r5, r7
A09044E6  F8DF 4038		ldr r4, [pc, #+56] ; 0xA09041F8
A09044EA  F044 0401		orr r4, r4, #1
A09044EE  47A0     		blx r4
A09044F0  E8BD 0021		ldmia sp!, { r0, r5 }

#10		MOVE	DO_DEL.Q,XOUTPUTCOOLING	{R:"1$FB:DO_DEL"}
(*) UDINT
A09044F4  F8DF 703C		ldr r7, [pc, #+60] ; 0xA0A0001C
A09044F8  7838     		ldrb r0, [r7]
A09044FA  F8DF 7020		ldr r7, [pc, #+32] ; 0xA0003EF8
A09044FE  7038     		strb r0, [r7]

#11		MOVE	DO_DEL.Q,XCOOLING	{R:"1$FB:DO_DEL"}
(*) BOOL
A0904500  F8DF 7030		ldr r7, [pc, #+48] ; 0xA0A0001C
A0904504  7838     		ldrb r0, [r7]
A0904506  F8DF 7030		ldr r7, [pc, #+48] ; 0x1000041A
A090450A  7038     		strb r0, [r7]

A090450C  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A0904510  F8DD E000		ldr lr, [sp]
A0904514  B002     		add sp, sp, #8

A0904516  4770     		bx lr

A0904518  FFFFFFFF		; 0xA00017EC
A090451C  FFFFFFFF		; 0xA0003EF8
A0904520  A09041F8		; 0xA09041F8
A0904524  A0A0000C		; 0xA0A0000C
A0904528  A0A00010		; 0xA0A00010
A090452C  A0A00014		; 0xA0A00014
A0904530  A0A00018		; 0xA0A00018
A0904534  A0A0001C		; 0xA0A0001C
A0904538  FFFFFFFF		; 0x1000041A

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
A090453C  B082     		sub sp, sp, #8
A090453E  F8CD E000		str lr, [sp]
A0904542  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A0904546  F8DF 7030		ldr r7, [pc, #+48] ; 0x10000438
A090454A  8838     		ldrh r0, [r7]
A090454C  F8DF 701C		ldr r7, [pc, #+28] ; 0xA0A00028
A0904550  8038     		strh r0, [r7]

A0904552  F8DF 7020		ldr r7, [pc, #+32] ; 0x10000406
A0904556  7838     		ldrb r0, [r7]
A0904558  F8DF 7014		ldr r7, [pc, #+20] ; 0xA0A0002A
A090455C  7038     		strb r0, [r7]

A090455E  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A0904562  F8DD E000		ldr lr, [sp]
A0904566  B002     		add sp, sp, #8

A0904568  4770     		bx lr

A090456C  A0A00028		; 0xA0A00028
A0904570  A0A0002A		; 0xA0A0002A
A0904574  FFFFFFFF		; 0x10000406
A0904578  FFFFFFFF		; 0x10000438


*** OUTPUT:
A090457C  B082     		sub sp, sp, #8
A090457E  F8CD E000		str lr, [sp]
A0904582  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A0904586  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A090458A  F8DD E000		ldr lr, [sp]
A090458E  B002     		add sp, sp, #8

A0904590  4770     		bx lr



**************************************************
	Task Timed init code
**************************************************

A0904592  B082     		sub sp, sp, #8
A0904594  F8CD E000		str lr, [sp]
A0904598  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A090459C  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A09045A0  F8DD E000		ldr lr, [sp]
A09045A4  B002     		add sp, sp, #8

A09045A6  4770     		bx lr



**************************************************
	Global init code
**************************************************

A09045B0  B082     		sub sp, sp, #8
A09045B2  F8CD E000		str lr, [sp]
A09045B6  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A09045BA  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A09045BE  F8DD E000		ldr lr, [sp]
A09045C2  B002     		add sp, sp, #8

A09045C4  4770     		bx lr



**************************************************
	Global RETAIN init code
**************************************************

A09045C6  B082     		sub sp, sp, #8
A09045C8  F8CD E000		str lr, [sp]
A09045CC  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A09045D0  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A09045D4  F8DD E000		ldr lr, [sp]
A09045D8  B002     		add sp, sp, #8

A09045DA  4770     		bx lr



********************************************
MEMORY MAP
********************************************

Code area type:          		       main code
Start code area:          		00000000A0900000h
End code area:            		00000000A0904728h
Code size:                		00004728h

Start local data area:    		00000000A0A00000h
End local data area:      		00000000A0A0002Bh
Local data size:          		0000002Bh

Start retentive data area:		0000000000000000h
End retentive data area:  		0000000000000000h
Retentive data size:      		00000000h

Start bit data area:      		0000000000000000h
End bit data area:        		0000000000000000h
Bit data size:            		00000000h



********************************************
CODE ID:                                30C9CE1A
DEBUG MEMO ID:                          A0905202
FULL MEMO ID:                           0000C826
********************************************
