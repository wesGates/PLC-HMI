PROGRAM PageDraw WITH Draw;
PROGRAM PageRefresh WITH Refresh;

	(***************************)
	(*                         *)
	(*     GLOBAL VARIABLES    *)
	(*                         *)
	(***************************)

VAR_GLOBAL

	{G:"Call stack"}
	giStackPtr : INT := -1;
	guiCallStack : ARRAY[ 0..9 ] OF UINT;

	{G:"Back buffer"}
	$giBackBufferCurr : INT := -1;
	$giBackBufferFirst : INT := -1;
	$giBackBufferLast : INT := -1;
	$guiBackBuffer : ARRAY[ 0..9 ] OF UINT;

	{G:"Sets"}
	$PagIndex : UINT;
	$PagNumber : UINT;
	$waitRefresh : BOOL;

	{G:"TouchScreen_vars"}
	fbTouchScreen : DrawTouchScreen;
	fbRefrTouchScreen : RefrTouchScreen;
	fbTouchScreenString_7 : Static02 := (x:=7, y:=8, pFont:=?DroidSansMono_12x24, bckCol:=16777215, pString:=?kStr00001, pVisVar:=1, format:=16#0020, bordPts:=0, selForeCol:=16777215, pRefrVar:=0, pSelVar:=0, numChars:=0);
	fbTouchScreenString_14 : Static02 := (wHnd:=1, x:=7, y:=51, pFont:=?DroidSansMono_12x24, bckCol:=16777215, pString:=?kStr00002, pVisVar:=1, format:=16#0020, bordPts:=0, selForeCol:=16777215, pRefrVar:=0, pSelVar:=0, numChars:=0);
	fbTouchScreenLine_9 : Line01 := (x1:=7, y1:=40, x2:=230, y2:=40, bordPts:=1);
	fbTouchScreenLine_16 : Line01 := (x1:=8, y1:=85, x2:=231, y2:=85, bordPts:=1);
	fbTouchScreenEdit_1 : EditBox03 := (wHnd:=2, x1:=174, y1:=8, x2:=221, y2:=31, pFont:=?DroidSansMono_12x24, bckCol:=16777215, rw:=TRUE, pVar:=16#00201000, order:=1, pVisVar:=1, foreSelCol:=16777215, refr:=TRUE, type:=tyInt, format:=16#0100000C, pEnumId:=0);
	fbTouchScreenEdit_15 : EditBox03 := (wHnd:=3, x1:=174, y1:=51, x2:=221, y2:=74, pFont:=?DroidSansMono_12x24, bckCol:=16777215, rw:=TRUE, pVar:=16#00201100, order:=6, pVisVar:=1, foreSelCol:=16777215, refr:=TRUE, type:=tyInt, format:=16#0100000C, pEnumId:=0);
	fbTouchScreenEdit_18 : EditBox03 := (wHnd:=4, x1:=33, y1:=107, x2:=200, y2:=130, pFont:=?DroidSansMono_12x24, bckCol:=16777215, rw:=TRUE, pVar:=16#00201200, order:=7, pVisVar:=1, foreSelCol:=16777215, refr:=TRUE, type:=tyInt, format:=16#00000014, pEnumId:=1);
	fbTouchScreenEdit_19 : EditBox03 := (wHnd:=5, x1:=34, y1:=141, x2:=201, y2:=164, pFont:=?DroidSansMono_12x24, bckCol:=16777215, rw:=TRUE, pVar:=16#00201200, order:=8, pVisVar:=1, foreSelCol:=16777215, refr:=TRUE, type:=tyInt, format:=16#00000014, pEnumId:=2);
	fbTouchScreenEdit_20 : EditBox03 := (wHnd:=6, x1:=88, y1:=192, x2:=147, y2:=215, pFont:=?DroidSansMono_12x24, bckCol:=16777215, bordPts:=1, rw:=TRUE, pVar:=?TempSend, order:=9, pVisVar:=1, foreSelCol:=16777215, refr:=TRUE, type:=tyInt, format:=16#00000010, pCanSel:=1, pEnumId:=0);
	TouchScreen_user_detected_str : STRING[31];
	TouchScreen_set_temp : INT;

	{G:"Back page manager"}
	fbBackPage : DrawBackPage;

END_VAR

	(***************************)
	(*                         *)
	(*        CONSTANTS        *)
	(*                         *)
	(***************************)

VAR_GLOBAL CONSTANT

	kStr00002 :STRING[4] := 'Hmd';
	kStr00001 :STRING[12] := 'Temperature';

END_VAR
VAR_GLOBAL CONSTANT

	{G:"Fonts"}
	EWP2_8x16_len : USINT := 8;
	EWP2_8x16_hei : USINT := 16;
	EWP2_8x16_offs : USINT := 0;
	EWP2_8x16 AT %MB1000.0 : ARRAY[ 0..5 ] OF BYTE := 254,8,16,0,0,2;
	DroidSansMono_12x24_len : USINT := 12;
	DroidSansMono_12x24_hei : USINT := 24;
	DroidSansMono_12x24_offs : USINT := 0;
	DroidSansMono_12x24 AT %MB1000.0 : ARRAY[ 0..3995 ] OF BYTE := 254,12,24,0,95,3,0,32,0,33,0,34,0,35,0,36,
				0,37,0,38,0,39,0,40,0,41,0,42,0,43,0,44,
				0,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,
				0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,
				0,61,0,62,0,63,0,64,0,65,0,66,0,67,0,68,
				0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,
				0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,84,
				0,85,0,86,0,87,0,88,0,89,0,90,0,91,0,92,
				0,93,0,94,0,95,0,96,0,97,0,98,0,99,0,100,
				0,101,0,102,0,103,0,104,0,105,0,106,0,107,0,108,
				0,109,0,110,0,111,0,112,0,113,0,114,0,115,0,116,
				0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,
				0,125,0,126,7(0),36,3(0),72,3(0),108,3(0),144,3(0),180,3(0),216,
				3(0),252,0,0,1,32,0,0,1,68,0,0,1,104,0,0,
				1,140,0,0,1,176,0,0,1,212,0,0,1,248,0,0,
				2,28,0,0,2,64,0,0,2,100,0,0,2,136,0,0,
				2,172,0,0,2,208,0,0,2,244,0,0,3,24,0,0,
				3,60,0,0,3,96,0,0,3,132,0,0,3,168,0,0,
				3,204,0,0,3,240,0,0,4,20,0,0,4,56,0,0,
				4,92,0,0,4,128,0,0,4,164,0,0,4,200,0,0,
				4,236,0,0,5,16,0,0,5,52,0,0,5,88,0,0,
				5,124,0,0,5,160,0,0,5,196,0,0,5,232,0,0,
				6,12,0,0,6,48,0,0,6,84,0,0,6,120,0,0,
				6,156,0,0,6,192,0,0,6,228,0,0,7,8,0,0,
				7,44,0,0,7,80,0,0,7,116,0,0,7,152,0,0,
				7,188,0,0,7,224,0,0,8,4,0,0,8,40,0,0,
				8,76,0,0,8,112,0,0,8,148,0,0,8,184,0,0,
				8,220,0,0,9,3(0),9,36,0,0,9,72,0,0,9,108,
				0,0,9,144,0,0,9,180,0,0,9,216,0,0,9,252,
				0,0,10,32,0,0,10,68,0,0,10,104,0,0,10,140,
				0,0,10,176,0,0,10,212,0,0,10,248,0,0,11,28,
				0,0,11,64,0,0,11,100,0,0,11,136,0,0,11,172,
				0,0,11,208,0,0,11,244,0,0,12,24,0,0,12,60,
				0,0,12,96,0,0,12,132,0,0,12,168,0,0,12,204,
				0,0,12,240,0,0,13,20,0,0,13,56,41(0),240,240,48,
				9(0),131,191,10(0),3(3),7(0),240,240,0,0,240,240,6(0),1,1,0,
				0,1,1,19(0),240,48,3(0),240,48,0,32,33,241,63,35,33,
				33,241,63,35,33,1,0,3,3,3(0),3,3,6(0),128,192,96,
				96,248,32,96,96,4(0),131,135,134,4,255,140,136,248,112,3(0),
				4(1),7,1,1,3(0),224,240,16,16,240,224,0,192,112,16,0,
				0,3,7,4,132,231,63,255,249,8,8,248,240,0,0,2,
				3,0,0,1,3,2,2,3,1,0,0,224,240,48,16,48,
				240,224,4(0),240,249,15,14,30,58,227,193,248,24,3(0),1,4(3),
				1,1,3,3,2,5(0),240,240,10(0),1,1,21(0),128,192,96,16,
				7(0),254,255,1,10(0),3,7,12,16,8(0),16,96,192,128,10(0),1,
				255,254,7(0),16,12,7,3,5(0),3(192),128,248,128,3(192),5(0),14,7,
				1,7,14,4,20(0),192,7(0),4(4),127,4(4),31(0),128,128,9(0),14,15,
				1,20(0),6(48),31(0),3(128),9(0),3(3),12(0),192,112,16,5(0),128,240,60,15,
				3,6(0),2,3,9(0),128,224,112,48,16,48,112,224,128,3(0),127,
				255,128,3(0),128,255,127,4(0),1,3,3,2,3,3,1,6(0),192,
				64,32,240,240,10(0),255,255,10(0),3,3,5(0),32,96,48,48,16,
				48,48,224,192,4(0),128,192,96,48,24,12,7,3,3(0),3,3,
				7(2),3(0),32,32,48,48,16,48,48,224,192,5(0),4,4,12,12,
				10,251,241,3(0),1,3,3,2,3(3),1,8(0),192,96,240,240,4(0),
				48,56,46,35,33,32,255,255,32,32,8(0),3,3,4(0),240,240,
				6(16),4(0),7,7,6,2,3(6),252,248,3(0),1,3,3,2,3,3,
				1,1,5(0),192,224,96,48,48,16,16,48,3(0),127,255,132,6,
				2,2,6,6,252,248,3(0),1,1,3,3,2,3,3,1,3(0),
				7(16),144,240,48,5(0),128,224,120,30,3,6(0),2,3,1,8(0),192,
				224,48,16,48,48,224,192,3(0),224,241,27,14,4,4,14,27,
				241,224,3(0),1,3,3,2,2,3,3,1,3(0),192,224,48,48,
				16,48,48,96,224,128,0,0,7,15,24,24,16,16,24,200,
				255,63,3(0),3,2,2,3,3,1,1,7(0),3(128),9(0),3(131),9(0),3(3),
				9(0),3(128),9(0),3(3),9(0),28,31,3,12(0),128,128,192,3(0),12,12,30,
				18,51,33,97,64,192,27(0),9(17),15(0),192,128,128,9(0),192,64,97,
				33,51,18,30,12,12,16(0),32,48,48,16,48,48,224,192,6(0),
				32,184,12,6,3,1,6(0),3(3),6(0),128,96,32,48,3(16),48,96,
				192,0,254,195,0,124,198,131,129,97,127,128,225,63,0,3,
				6,4,12,4(8),12,6(0),192,112,112,192,5(0),192,248,62,51,48,
				48,51,62,248,192,0,2,3,8(0),3,2,0,240,240,6(48),224,
				192,0,0,255,255,5(12),14,251,241,0,0,8(3),1,4(0),192,224,
				96,5(48),32,0,0,63,255,192,128,10(0),1,1,6(3),0,0,240,
				240,4(48),96,224,192,3(0),255,255,4(0),128,192,255,63,0,0,6(3),
				1,1,5(0),240,240,7(48),3(0),255,255,7(12),3(0),9(3),3(0),240,240,7(48),
				3(0),255,255,7(12),3(0),3,3,10(0),192,224,96,5(48),3(0),63,255,192,
				3(0),12,12,252,252,4(0),1,6(3),1,0,0,240,240,6(0),240,240,
				0,0,255,255,6(12),255,255,0,0,3,3,6(0),3,3,3(0),16,
				16,48,240,240,3(16),7(0),255,255,7(0),2,2,3(3),3(2),10(0),240,240,
				9(0),128,255,255,3(0),6(3),1,1,5(0),240,240,3(0),128,192,96,48,
				16,0,0,255,255,12,6,31,49,224,192,4(0),3,3,5(0),1,
				3,2,0,0,240,240,10(0),255,255,10(0),9(3),0,0,240,240,192,
				4(0),192,240,240,0,0,255,255,1,62,192,224,30,1,255,255,
				0,0,3,3,0,0,3,3,0,0,3,3,0,0,240,240,
				224,128,4(0),240,240,0,0,255,255,0,3,14,28,112,192,255,
				255,0,0,3,3,5(0),1,3,3,0,0,128,224,96,4(48),96,
				192,128,0,0,127,255,128,4(0),128,255,127,3(0),1,1,4(3),1,
				5(0),240,240,5(48),224,192,3(0),255,255,3(24),8,12,7,3,3(0),3,
				3,9(0),128,224,96,4(48),96,192,128,0,0,127,255,128,4(0),128,
				255,127,3(0),1,1,3(3),15,29,56,16,3(0),240,240,5(48),224,192,
				3(0),255,255,3(24),56,236,199,3,3(0),3,3,5(0),1,3,2,0,
				0,192,224,5(48),32,4(0),3,7,6,12,12,24,248,240,4(0),6(3),
				1,4(0),4(48),240,240,4(48),6(0),255,255,10(0),3,3,6(0),240,240,6(0),
				240,240,0,0,255,255,128,4(0),128,255,255,3(0),1,6(3),1,0,
				0,16,240,192,6(0),192,240,16,0,0,7,30,248,192,192,248,
				30,7,7(0),3,3,5(0),112,240,8(0),240,240,0,63,252,192,56,
				7,7,56,192,240,127,3(0),3,1,4(0),1,3,3(0),16,112,224,
				128,0,0,128,224,112,16,3(0),128,192,115,30,30,115,192,128,
				3(0),2,3,1,4(0),1,3,2,0,16,112,224,128,4(0),128,224,
				112,16,0,0,1,3,14,248,248,14,3,8(0),3,3,6(0),7(48),
				240,112,48,3(0),128,224,48,28,14,3,1,4(0),10(3),6(0),240,240,
				16,16,8(0),255,255,10(0),31,31,16,16,5(0),16,112,192,11(0),3,
				15,60,240,128,11(0),3,2,5(0),16,16,240,240,10(0),255,255,8(0),
				16,16,31,31,9(0),192,112,112,192,5(0),16,28,7,1,0,0,
				1,7,28,16,37(0),12(16),4(0),8,24,48,32,31(0),5(128),5(0),224,241,
				25,25,8,9,9,255,255,3(0),1,3,3,2,2,3,1,1,
				3,3(0),248,248,0,5(128),4(0),255,255,129,1,0,0,1,131,255,
				124,0,0,3,1,1,3,2,2,3,3,1,7(0),5(128),4(0),124,
				255,131,1,1,0,1,1,5(0),1,1,3,3,2,3,3,5(0),
				4(128),0,248,248,3(0),124,255,1,1,0,1,1,255,255,4(0),1,
				3,3,2,3,1,3,3,6(0),5(128),4(0),124,255,137,9,9,8,
				9,9,15,14,3(0),1,1,3,3,2,3(3),3(0),3(128),240,248,152,
				136,136,152,24,5(0),255,255,10(0),3,3,10(0),7(128),3(0),14,223,241,
				32,32,49,31,14,3(0),28,62,99,3(65),97,99,63,30,0,0,
				248,248,0,4(128),5(0),255,255,3,1,0,1,1,255,254,3(0),3,
				3,5(0),3,3,4(0),3(128),152,152,10(0),255,255,7(0),3(2),3,3,3(2),
				4(0),4(128),152,152,10(0),255,255,5(0),96,96,64,96,96,63,31,6(0),
				248,248,4(0),128,128,4(0),255,255,24,60,102,195,129,5(0),3,3,
				4(0),1,3,2,3(0),3(8),248,248,10(0),255,255,7(0),3(2),3,3,3(2),
				3(0),128,0,3(128),0,3(128),3(0),255,255,1,1,255,254,1,1,255,
				255,0,0,3,3,0,0,3,3,0,0,3,3,0,0,128,
				128,0,4(128),5(0),255,255,3,1,0,1,1,255,254,3(0),3,3,
				5(0),3,3,6(0),4(128),5(0),124,255,131,1,0,0,1,131,255,124,
				3(0),1,1,3,2,2,3,1,1,3(0),128,128,0,5(128),4(0),255,
				255,129,1,0,0,1,131,255,124,0,0,127,127,1,3,2,
				2,3,3,1,5(0),4(128),0,128,128,3(0),124,255,1,1,0,1,
				1,255,255,4(0),1,3,3,2,3,1,127,127,5(0),128,0,0,
				4(128),5(0),255,255,1,1,0,1,1,5(0),3,3,11(0),5(128),5(0),7,
				15,25,24,16,49,225,225,4(0),3(3),2,3,3,1,1,3(0),3(128),
				224,240,4(128),6(0),255,255,10(0),1,3,3,2,3,3,3(0),128,128,
				5(0),128,128,3(0),255,255,5(0),255,255,4(0),1,3,3,2,3,1,
				3,3,3(0),128,128,6(0),128,128,3(0),7,62,240,128,128,240,62,
				7,6(0),1,3,3,1,4(0),128,128,3(0),128,128,3(0),128,128,3,
				255,0,224,60,3,7,62,224,0,255,3,0,0,3,1,4(0),
				1,3,4(0),128,128,4(0),128,128,4(0),1,195,238,56,56,238,195,
				1,3(0),2,3,1,4(0),1,3,2,0,0,128,128,6(0),128,128,
				3(0),7,62,240,192,128,240,62,7,3(0),96,64,96,48,31,7,
				1,6(0),8(128),5(0),128,224,48,24,14,3,1,4(0),3,3,6(2),7(0),
				224,224,48,48,16,4(0),8,24,28,247,231,10(0),15,15,24,24,
				16,7(0),248,11(0),255,11(0),127,8(0),16,48,48,224,224,10(0),231,247,
				28,24,8,4(0),16,24,24,15,15,18(0),4,6,2,6,4,12,
				8,12,4,14(0);

	{G:"Keys"}
	kKEY_Enter : USINT := 13;
	kKEY_Esc : USINT := 27;
	kKEY_Del : USINT := 127;
	kKEY_Left : USINT := 8;
	kKEY_Right : USINT := 12;
	kKEY_ArrowUp : USINT := 11;
	kKEY_ArrowDw : USINT := 10;
	kKEY_Back : USINT := 4;
	kKEY_Tab : USINT := 9;
	kKEY_Shift : USINT := 6;
	kKEY_Caps : USINT := 5;
	kKEY_Confirm : USINT := 14;
	kKEY_VK_F1 : USINT := 30;
	kKEY_VK_F2 : USINT := 31;
	kKEY_VK_F3 : USINT := 32;
	kKEY_VK_F4 : USINT := 33;
	kKEY_VK_F5 : USINT := 34;
	kKEY_VK_F6 : USINT := 35;
	kKEY_VK_F7 : USINT := 36;
	kKEY_VK_F8 : USINT := 37;
	kKEY_VK_F9 : USINT := 38;
	kKEY_VK_F10 : USINT := 39;

	{G:"Data types"}
	tyUndefined : USINT := 19;
	tyBool : USINT := 1;
	tySInt : USINT := 2;
	tyInt : USINT := 5;
	tyDInt : USINT := 9;
	tyLInt : USINT := 12;
	tyUSInt : USINT := 3;
	tyUInt : USINT := 6;
	tyUDInt : USINT := 10;
	tyULInt : USINT := 13;
	tyReal : USINT := 15;
	tyLReal : USINT := 16;
	tyByte : USINT := 4;
	tyWord : USINT := 7;
	tyDWord : USINT := 11;
	tyLWord : USINT := 14;
	tyString : USINT := 17;

	{G:"Messages"}
	kWM_NULL : UINT := 0;
	kWM_KEY : UINT := 1;
	kWM_MSG : UINT := 2;
	kWM_SELECT : UINT := 3;
	kWM_PUSH : UINT := 4;
	kEV_WM_TEXTSELECT : UINT := 5;
	kEV_WM_OPENPAGE : UINT := 6;
	kEV_WM_CLOSEPAGE : UINT := 7;
	kEV_WM_CHANGESETPAGE : UINT := 8;

	{G:"Access modes"}
	kACS_IDLE : USINT := 0;
	kACS_INIT : USINT := 1;
	kACS_PRINT : USINT := 2;
	kACS_SELECT : USINT := 3;
	kACS_MODIFY : USINT := 4;
	kACS_DELETE : USINT := 5;
	kACS_QUERY : USINT := 6;
	kACS_BCKQUERY : USINT := 7;
	kACS_CLOSE : USINT := 8;
	kACS_OPEN : USINT := 9;

	{G:"Parameters and device"}
	kCOMM_PROTO_ID_LOCAL : USINT := 1;
	kCOMM_PROTO_ID_MODBUS_RTU : USINT := 2;
	kCOMM_PROTO_ID_MODBUS_TCP : USINT := 3;
	kCOMM_PROTO_ID_CANOPEN : USINT := 4;

	{G:"Button types"}
	kBTN_TYPE_NORMAL : USINT := 0;
	kBTN_TYPE_TOGGLE : USINT := 1;

	{G:"Resources"}
	kLangBaseLanguage : UDINT := 0;


	(*** Enumeratives: ***)
	kbEnumIdxBaseLanguage : UDINT := 0;
	kbResEnums : ARRAY[ 0..68 ] OF BYTE :=
	(*** Language: BaseLanguage ***)
	(*** Enum ID ***) 16#01,
	(* 0 *) 16#00, 16#00, 16#00, 16#00, 
	(* ... *) 16#2E, 16#2E, 16#2E, 16#00, 
	(* 1 *) 16#01, 16#00, 16#00, 16#00, 
	(* User Detected.  *) 16#55, 16#73, 16#65, 16#72, 16#20, 16#44, 16#65, 16#74, 16#65, 16#63, 16#74, 16#65, 16#64, 16#2E, 16#20, 16#00, 
	(* End of enum *) 16#CD, 16#CD, 16#CD, 16#CD, 16#CD, 16#CD, 16#CD, 16#CD, 
	(*** Enum ID ***) 16#02,
	(* 0 *) 16#00, 16#00, 16#00, 16#00, 
	(* ... *) 16#2E, 16#2E, 16#2E, 16#00, 
	(* 1 *) 16#01, 16#00, 16#00, 16#00, 
	(* Hello! *) 16#48, 16#65, 16#6C, 16#6C, 16#6F, 16#21, 16#00, 
	(* End of enum *) 16#CD, 16#CD, 16#CD, 16#CD, 16#CD, 16#CD, 16#CD, 16#CD, 
	(* End of language *) 16#CD, 16#CD, 16#CD, 16#CD ;
	{G:"Parameters"}
	kPAR_MSG_NOTFOUND : UINT := 103;
	kPAR_MSG_SYSERR : UINT := 106;
	kPAR_ERR_OK : UINT := 0;
	kPAR_ERR_NOTFOUND : UINT := 1;
	kPAR_ERR_INVTYPE : UINT := 3;

END_VAR

	(***************************)
	(*                         *)
	(*        PROGRAMS         *)
	(*                         *)
	(***************************)

PROGRAM PageDraw

	VAR
	res : USINT;
	END_VAR

	{CODE:ST}
	(* Locking the video *)
	res := Video_Lock( res );

	(* The resource bitmaps color depth is supported... *)
	res := Video_SetUseBitmapsColorDepth( TRUE );

	(* INIT HMI ENVIRONMENT *)
	res := Video_InitHMI_ZOrder( TRUE );

	(* Switching on the LCD *)
	res := Video_Switch( TRUE );

	(* Initializing the length of the call stack *)
	giStackPtr := 0;

	(* Initializing the back circular buffer indexes *)
	$giBackBufferCurr := -1;
	$giBackBufferFirst := -1;
	$giBackBufferLast := -1;

	(* Declaring the code of the keys for driving the editing mode *)
	res := Video_SetEditKey( 0, kKEY_Enter );
	res := Video_SetEditKey( 1, kKEY_Esc );
	res := Video_SetEditKey( 2, kKEY_Del );
	res := Video_SetEditKey( 3, kKEY_Left );
	res := Video_SetEditKey( 4, kKEY_Right );
	res := Video_SetEditKey( 5, kKEY_ArrowUp );
	res := Video_SetEditKey( 6, kKEY_ArrowDw );
	res := Video_SetEditKey( 7, kKEY_Back );
	res := Video_SetEditKey( 8, kKEY_Tab );
	res := Video_SetEditKey( 9, kKEY_Shift );
	res := Video_SetEditKey( 10, kKEY_Caps );
	res := Video_SetEditKey( 11, kKEY_Confirm );

	(* *** DECLARING THE RESOURCES *** *)
	res := Video_LoadLanguage( 0, ?kbResEnums[0] );

	(* Declaring the imported fonts *)
	res := Video_AddFontUnicode( ?EWP2_8x16, EWP2_8x16_len, EWP2_8x16_hei );
	res := Video_AddFontUnicode( ?DroidSansMono_12x24, DroidSansMono_12x24_len, DroidSansMono_12x24_hei );

	(* Declaring the system attributes of windows *)
	res := Video_SetWndSysProps( ?EWP2_8x16, 12632256, 0 );

	(* *** INITIALIZING THE OBJECTS OF PAGE 'TouchScreen' *** *)

	(* Init the set elements *)
	guiCallStack[ giStackPtr ] := 0;
	WHILE TRUE DO
		CASE guiCallStack[ giStackPtr ] OF

			0:
				fbTouchScreen();


		END_CASE;


	END_WHILE;


END_PROGRAM

PROGRAM PageRefresh

VAR
res : USINT;
END_VAR

	{CODE:ST}
	(* Wait for the PageDraw to start *)
	WHILE giStackPtr < 0 DO
		res := Video_Sleep(50);
	END_WHILE;

	WHILE TRUE DO
		CASE guiCallStack[ giStackPtr ] OF

			0:
				fbRefrTouchScreen();


		END_CASE;

		res := Video_Sleep( 50 );

	END_WHILE;


END_PROGRAM

	(***************************)
	(*                         *)
	(*  ALARM PAGE F. BLOCKS   *)
	(*                         *)
	(***************************)

FUNCTION_BLOCK DrawBackPage

	VAR_INPUT
		IsOpening : BOOL;
		CurrPageId : UINT;
	END_VAR
	VAR_OUTPUT
		BackPageId : UINT;
	END_VAR
	VAR_EXTERNAL
		$giBackBufferCurr : INT;
		$giBackBufferFirst : INT;
		$giBackBufferLast : INT;
		$guiBackBuffer : ARRAY[ 0..9 ] OF UINT;
	END_VAR
	{CODE:ST}

	IF IsOpening THEN

		(* Entering page *)

		(* Save this page's ID into circular back buffer *)
		$giBackBufferCurr := $giBackBufferCurr + 1;
		IF $giBackBufferCurr >= 10 THEN
			$giBackBufferCurr := 0;
		END_IF;
		$guiBackBuffer[ $giBackBufferCurr ] := CurrPageId;
		IF $giBackBufferFirst = -1 THEN
			$giBackBufferFirst := 0;
		ELSIF $giBackBufferCurr = $giBackBufferFirst AND $giBackBufferFirst <> $giBackBufferLast THEN
			$giBackBufferFirst := $giBackBufferFirst + 1;
			IF $giBackBufferFirst = 10 THEN
				$giBackBufferFirst := 0;
			END_IF;
		END_IF;

		(* Set last page's ID *)
		IF $giBackBufferCurr = $giBackBufferFirst THEN
			$giBackBufferLast := -1;
		ELSIF $giBackBufferCurr = 0 AND $giBackBufferFirst <> 9 THEN
			$giBackBufferLast := 9;
		ELSIF $giBackBufferCurr <> $giBackBufferFirst THEN
			$giBackBufferLast := $giBackBufferCurr - 1;
		ELSE
			$giBackBufferLast := -1;
		END_IF;
		IF $giBackBufferLast <> -1 THEN
			BackPageId := $guiBackBuffer[$giBackBufferLast];
		ELSE
			BackPageId := 16#FFFF;
		END_IF;

	ELSE

		(* Closing page *)
		$giBackBufferCurr := $giBackBufferCurr - 1;
		IF $giBackBufferCurr < 0 THEN
			$giBackBufferCurr := 9;
		END_IF;
		$giBackBufferCurr := $giBackBufferCurr - 1;
		IF $giBackBufferCurr < 0 THEN
			$giBackBufferCurr := 9;
		END_IF;

	END_IF;

	END_FUNCTION_BLOCK

	(***********************************)
	(*                                 *)
	(* EXPRESSIONS RESOLVER F. BLOCKS  *)
	(*                                 *)
	(***********************************)

	(***************************)
	(*                         *)
	(* PAGE-DRAWING F. BLOCKS  *)
	(*                         *)
	(***************************)

FUNCTION_BLOCK DrawTouchScreen

	VAR_OUTPUT
	uiOutVar : UINT;
	END_VAR

	VAR_EXTERNAL
	guiCallStack : ARRAY[ 0..9 ] OF UINT;
	giStackPtr : INT;
	fbBackPage : DrawBackPage;
	TouchScreen_user_detected_str : STRING[31];
	TouchScreen_set_temp : INT;
	fbTouchScreenString_7 : Static02;
	fbTouchScreenString_14 : Static02;
	fbTouchScreenLine_9 : Line01;
	fbTouchScreenLine_16 : Line01;
	fbTouchScreenEdit_1 : EditBox03;
	fbTouchScreenEdit_15 : EditBox03;
	fbTouchScreenEdit_18 : EditBox03;
	fbTouchScreenEdit_19 : EditBox03;
	fbTouchScreenEdit_20 : EditBox03;
	$waitRefresh : BOOL;
	END_VAR

	VAR
	res : USINT;
	bStatRedrw : BOOL;
	bMapsReset : BOOL;
	iNextSel : INT;
	$Set_IndexVisEl : UINT;
	$Set_CycleRefresh : UINT;
	$Set_PtrBoolVis : @BOOL;
	$Set_VisEl : BOOL;
	$Set_IndexPageInSet : UINT;
	$Set_ForcePageReload : BOOL;
	$Set_NextPage : BOOL;
	$Set_PrevPage : BOOL;
	$Set_LocalSetPagNumber: UINT;
	$Set_NumVisEl: UINT;
	$Set_LastFirstEl: INT;
	udiev : UDINT;
	ev : UINT;
	key : USINT;
	x1 : UINT;
	y1 : UINT;
	x2 : UINT;
	y2 : UINT;
	wParam : UINT;
	END_VAR

	{CODE:ST}

	(* Setting init value of local variables *)
	TouchScreen_user_detected_str := '"User Detected"';


	(* Writing this page's ID to the top of the callstack *)
	guiCallStack[ giStackPtr ] := 16#00;

	(* Manage back page index for opening page *)
	fbBackPage.IsOpening := TRUE;
	fbBackPage.CurrPageId := 16#00;
	fbBackPage();


	(* Flag of waiting for refresh task *)
	$waitRefresh := TRUE;

	(* Resetting the object map *)
	res := Video_ResetMaps( 16#00 );

	(* Setting flags: this page is to be drawn *)
	bStatRedrw := TRUE;
	bMapsReset := TRUE;

	(* The area to be cleared is the area of the entire page *)
	x1:= 0;
	y1:= 0;
	x2:= 239;
	y2:= 319;

	(* Unlocking the video *)
	res := Video_Unlock( res );

	WHILE TRUE DO

		(* Locking the video *)
		res := Video_Lock( res );

		(* Initializing the page *)
		res := Video_InitPage( 0, 0, 239, 319, ?' ', 16#0003 );

		(* Setting the page colors *)
		res := Video_SetPageColors( 0, 16777215 );

		IF bStatRedrw THEN

			(* *** CLEARING PAGE AREA *** *)
			res := Video_ClrRect( x1, y1, x2, y2 );

		END_IF;

		IF bMapsReset THEN

			(* Resetting all maps *)
			res := Video_ResetMaps( 16#FF );

			(* *** DRAW PAGE CONTROLS *** *)

			(* *** PAGE SECTION *** *)

			(* *** DRAW CONTROLS *** *)
			fbTouchScreenEdit_1.accMode := kACS_INIT;
			fbTouchScreenEdit_1();
			fbTouchScreenEdit_1.accMode := kACS_PRINT;
			fbTouchScreenString_7.accMode := kACS_INIT;
			fbTouchScreenString_7();
			fbTouchScreenString_7.accMode := kACS_PRINT;
			fbTouchScreenLine_9.accMode := kACS_INIT;
			fbTouchScreenLine_9();
			fbTouchScreenLine_9.accMode := kACS_PRINT;
			fbTouchScreenString_14.accMode := kACS_INIT;
			fbTouchScreenString_14();
			fbTouchScreenString_14.accMode := kACS_PRINT;
			fbTouchScreenEdit_15.accMode := kACS_INIT;
			fbTouchScreenEdit_15();
			fbTouchScreenEdit_15.accMode := kACS_PRINT;
			fbTouchScreenLine_16.accMode := kACS_INIT;
			fbTouchScreenLine_16();
			fbTouchScreenLine_16.accMode := kACS_PRINT;
			fbTouchScreenEdit_18.accMode := kACS_INIT;
			fbTouchScreenEdit_18();
			fbTouchScreenEdit_18.accMode := kACS_PRINT;
			fbTouchScreenEdit_19.accMode := kACS_INIT;
			fbTouchScreenEdit_19();
			fbTouchScreenEdit_19.accMode := kACS_PRINT;
			fbTouchScreenEdit_20.accMode := kACS_INIT;
			fbTouchScreenEdit_20();
			fbTouchScreenEdit_20.accMode := kACS_PRINT;

		END_IF;

		(* Unlocking the video *)
		res := Video_Unlock( res );

		(* Reset the flags for page redraw request *)
		bStatRedrw := FALSE;
		bMapsReset := FALSE;

		(* *** EVENTS HANDLING *** *)
		WHILE NOT bStatRedrw DO

			(* the drawing task wait the refreshing task *)
			IF $waitRefresh THEN
				res := Video_Sleep( 50 );
			ELSE

				(* Retrieving events *)
				udiev := Video_GetEvent( res );
				(* Extracting the event code *)
				ev := TO_UINT(udiev);

				CASE ev OF

				(* Key-related events handling: *)
				kWM_KEY:

					key := TO_USINT(SHR(udiev, 16));

				(* Selecting a control: *)
				kWM_SELECT:

					(* Extracting the index of the edit box clicked *)
					iNextSel := TO_INT(SHR(udiev, 16));

					IF res <> 0 THEN

						CASE iNextSel OF

							4:	(* Object: Edit_18 - Event: OnClick - ProcName: Wave *)
							
							(* End of associated procedure *)

						END_CASE;

					END_IF;

					CASE iNextSel OF

						2,3,4,5,6:
							REPEAT

							(* Entering the edit mode *)
							res := Video_EnterEdit( TO_UINT( iNextSel ) );

							IF res = kKEY_ArrowUp THEN

								iNextSel := TO_INT( Video_NextEdit( TRUE ) );
								IF iNextSel > -1 THEN
									res := Video_SendEvent( kWM_SELECT, TO_UINT(iNextSel) );
								END_IF;

							ELSIF res = kKEY_ArrowDw THEN

								iNextSel := TO_INT( Video_PrevEdit( TRUE ) );
								IF iNextSel > -1 THEN
									res := Video_SendEvent( kWM_SELECT, TO_UINT(iNextSel) );
								END_IF;

							END_IF;

							UNTIL res <> kKEY_Confirm 
							END_REPEAT;

							IF res <> 255 THEN
								(* The area to be cleared is the area of the entire screen (without system bar)*)
								x1:= 0;
								y1:= 0;
								x2:= 239;
								y2:= 319;
								bMapsReset := TRUE;
								bStatRedrw := TRUE;
							END_IF;

					END_CASE;

					END_CASE;
				END_IF;

			END_WHILE;

		END_WHILE;

	END_FUNCTION_BLOCK

	(***************************)
	(*                         *)
	(* REFRESHING FUN. BLOCKS  *)
	(*                         *)
	(***************************)

FUNCTION_BLOCK RefrTouchScreen

	VAR_EXTERNAL
	guiCallStack : ARRAY[ 0..9 ] OF UINT;
	giStackPtr : INT;
	fbTouchScreenString_7 : Static02;
	fbTouchScreenString_14 : Static02;
	fbTouchScreenLine_9 : Line01;
	fbTouchScreenLine_16 : Line01;
	fbTouchScreenEdit_1 : EditBox03;
	fbTouchScreenEdit_15 : EditBox03;
	fbTouchScreenEdit_18 : EditBox03;
	fbTouchScreenEdit_19 : EditBox03;
	fbTouchScreenEdit_20 : EditBox03;
	$waitRefresh : BOOL;
	END_VAR

	VAR
	res : USINT;
	pagID : UINT;
	n : USINT;
	iSP : INT;
	pDC : UDINT;
	rx1 : UINT;
	ry1 : UINT;
	rx2 : UINT;
	ry2 : UINT;
	END_VAR

	{CODE:ST}

	REPEAT

		(* Locking the video *)
		res := Video_Lock( res );

		(* Testing if page has changed *)
		pagID := guiCallStack[ giStackPtr ];

		IF pagID = 16#00 THEN

			(* the refresh task is arrived *)
			$waitRefresh := FALSE;

			(* *** REFRESH PAGE CONTROLS *** *)

			(* Update refresh flags for page controls *)
			res := Video_UpdatePageControls( TRUE );


			(* *** REFRESHING BACKGROUND ITEMS *** *)
			(* Cursor across the call stack *)
			iSP := giStackPtr;

			(* *** REFRESHING PARENT BACKGROUND ITEMS *** *)

			
		END_IF;

		(* Unlocking the video *)
		res := Video_Unlock( res );

		(* Suspending the task *)
		res := Video_Sleep( 50 );

	UNTIL pagID <> 16#00
	END_REPEAT;

END_FUNCTION_BLOCK

	(***************************)
	(*                         *)
	(* PARAMETER  FUN. BLOCKS  *)
	(*                         *)
	(***************************)

